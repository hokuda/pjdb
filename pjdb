#!/usr/bin/python3
# -*- coding: utf-8 -*-

# issues
# unable to paste with mouse middle button -> it seems impossible in nature of prompt toolkit
# implement file cache

from __future__ import unicode_literals
from prompt_toolkit.application import Application
from prompt_toolkit.buffer import SelectionType
from prompt_toolkit.clipboard.pyperclip import PyperclipClipboard
from prompt_toolkit.filters import Condition
from prompt_toolkit.filters import has_selection
from prompt_toolkit.document import Document
from prompt_toolkit.filters import to_filter
from prompt_toolkit.key_binding import KeyBindings, merge_key_bindings
from prompt_toolkit.key_binding.defaults import load_key_bindings
from prompt_toolkit.layout import Layout, VSplit, HSplit, Window
from prompt_toolkit.layout import Dimension
from prompt_toolkit.layout import ScrollOffsets
from prompt_toolkit.layout.dimension import D
from prompt_toolkit.layout.margins import Margin
from prompt_toolkit.layout.margins import NumberedMargin
from prompt_toolkit.layout.controls import FormattedTextControl
from prompt_toolkit.lexers import PygmentsLexer
from prompt_toolkit.shortcuts import yes_no_dialog
from prompt_toolkit.styles import Style
from prompt_toolkit.styles import default_pygments_style
from prompt_toolkit.widgets import TextArea
from prompt_toolkit.widgets import SearchToolbar
from prompt_toolkit.key_binding.bindings.scroll import scroll_page_up,scroll_page_down

from ptterm import Terminal

from pygments.lexers.python import PythonLexer
from pygments.lexers.jvm import JavaLexer

import tornado.websocket

import javalang

import asyncio
import datetime
from distutils.spawn import find_executable
import json
import os
import threading
import traceback
import sys
import itertools

LOG_FILE = './pjdb.log'
LOG_FD = open(LOG_FILE, mode='at') # append in text mode
BINDIR = os.path.abspath(os.path.dirname(__file__))
HISTORY_FILE="./pjdb.history";
RLWRAP_LOG_FILE="./rlwrap.log";
PJDB_PORT="PJDB_PORT"
PJDB_PORT_INT=55555

import socket, errno

for _ in range(8):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.bind(("127.0.0.1", PJDB_PORT_INT))
    except socket.error as e:
        if e.errno == errno.EADDRINUSE:
            print("Port " + str(PJDB_PORT_INT) + " is already in use")
            PJDB_PORT_INT += 1
    else:
        s.close()
        break

os.environ[PJDB_PORT] = str(PJDB_PORT_INT)

DEBUG=False
DEBUG=True



class NoNumberedMarginWithCurrentlineAndBreakpoint(Margin):
    """ 
    Margin that displays only the current line marker and the break point marker.
    """

    bplinenos = []
    current_lineno = 0
    style = "class:line-number"
    style_current = "class:line-number bold fg:ansiblack reverse"
    style_breakpoint = "class:line-number bold fg:ansired"
    style_breakpoint_current = "class:line-number bold fg:ansired reverse"
    
    def __init__(self):
        pass

    def get_width(self, get_ui_content):
        line_count = get_ui_content().line_count
        #return len(str(line_count)) + 1 + 1
        return 1

    def create_margin(self, window_render_info, width, height):
        result = []
        last_lineno = None

        for lineno in window_render_info.displayed_lines:
            is_current = lineno == NoNumberedMarginWithCurrentlineAndBreakpoint.current_lineno
            is_breakpoint = lineno in NoNumberedMarginWithCurrentlineAndBreakpoint.bplinenos
            if lineno % 10 == 0 and DEBUG:
                debug(self.__class__.__name__ + "." + sys._getframe().f_code.co_name + ": lineno:" + str(lineno) + " bplinenos:" + str(NoNumberedMarginWithCurrentlineAndBreakpoint.bplinenos))
            # Only display line number if this line is not a continuation of the previous line.
            if lineno == last_lineno:
                result.append(("", "\n"))
                continue

            if is_current:
                if is_breakpoint:
                    result.append((type(self).style_breakpoint_current, ">\n"))
                else:
                    result.append((type(self).style_current,            ">\n"))
            else:
                if is_breakpoint:
                    result.append((type(self).style_breakpoint,         "*\n"))
                else:
                    result.append((type(self).style,                    " \n"))
            last_lineno = lineno

        return result


class Code():
    """
    code
    """
    code_cache = {}
    current = None
    
    def __init__(self, fqcn, lineno, path):
        self.fqcn = fqcn
        self.lineno = lineno
        self.path = path
        if path != None:
            self.lines = [l.rstrip('\n') for l in self._read_source_code(path)]
            self.joined_lines = '\n'.join(self.lines)
            self.numbered_lines = ["{} {}".format(str(i),line) for i,line in enumerate(self.lines, start=1)]
            self.joined_numbered_lines = '\n'.join(self.numbered_lines)
            self.cursor_position = sum([len(self.numbered_lines[i])+1 for i in range(lineno-1)])
        else:
            self.joined_numbered_lines = "source code is not found"
            self.cursor_position = 0
        self.lineno_to_fqcn = self._create_map_from_lineno_to_fqcn()
        Code.current = self

    def _read_source_code(self, path):
        try:
            with open(path, "rt") as fd:
                return fd.readlines()
        except Exception as e:
            warn(traceback.format_exc())
            raise e

    def _extract_class_from_path(self, path, node):
        class_list = []
        for p in list(path) + [node]:
            if (isinstance(p, javalang.tree.ClassDeclaration) or
                isinstance(p, javalang.tree.InterfaceDeclaration) or
                isinstance(p, javalang.tree.ClassCreator)):
                class_list.append(p)
        return class_list

    def _create_class_hierarchy_list(self):
        tree = javalang.parse.parse(self.joined_lines)
        package_name = tree.package.name

        hlist = []
        for path, node in tree.filter(javalang.tree.ClassCreator):
            if node.body == None:
                continue
            hlist.append(self._extract_class_from_path(path,node))

        for path, node in tree.filter(javalang.tree.ClassDeclaration):
            hlist.append(self._extract_class_from_path(path,node))

        for path, node in tree.filter(javalang.tree.InterfaceDeclaration):
            hlist.append(self._extract_class_from_path(path,node))

        return package_name, hlist

    def _name_anonymous_class(self, tree, depth):
        _tree = list(filter(lambda x:len(x)>depth+1, tree))
        inner_classes = list(set([_tree[i][depth+1] for i in range(len(_tree))]))
        inner_anonymous_classes = list(
            filter(lambda x: isinstance(x, javalang.tree.ClassCreator) and len(x.body)>0, inner_classes)
        )
        inner_anonymous_classes.sort(key=lambda x: x.body[0].position.line)
        for i, node in enumerate(inner_anonymous_classes):
            node.type.name = str(i+1)
        for node in inner_classes:
            subtree = list(filter(lambda x: x[depth+1] == node, _tree))
            self._name_anonymous_class(subtree, depth+1)

    def _get_node_name(self, node):
        if isinstance(node, javalang.tree.ClassDeclaration)  or isinstance(node, javalang.tree.InterfaceDeclaration):
            return node.name
        elif isinstance(node, javalang.tree.ClassCreator):
            return node.type.name

    def _create_class_tree(self):
        # make class tree represented in list format
        # [
        #   [Util],
        #   [Util, RuntimeActions],
        #   [Util, RuntimeActions, 1],
        #   [Util, RuntimeActions, 2],
        #   [Util, RuntimeActions, 2, 1],
        #   ...
        # ]
        package_name, hierarchy_list = self._create_class_hierarchy_list()

        self._name_anonymous_class(hierarchy_list, 0)

        return package_name, hierarchy_list

    def _get_fqcn(self, package_name, hierarchy):
        fqcn = package_name + "." + self._get_node_name(hierarchy[0])
        if len(hierarchy)==1:
            return fqcn
        for node in hierarchy[1:]:
            fqcn += "$" + self._get_node_name(node)
        return fqcn

    def _get_line_numbers(self, node):
        if node == None or isinstance(node, str) or isinstance(node, bool) or isinstance(node, list):
            return []
    
        line_numbers = []
        if hasattr(node, "position") and node.position != None:
            line_numbers += [node.position.line]

        for child in node.children:
            if isinstance(child, list) or isinstance(child, set):
                for x in child:
                    if x == None:
                        continue
                    line_numbers += self._get_line_numbers(x)
            else:
                line_numbers += self._get_line_numbers(child)

        return line_numbers
    
    def _create_map_from_lineno_to_fqcn(self):
        lineno_to_fqcn = [None] * len(self.lines)

        try:
            package_name, hierarchy_list = self._create_class_tree()
            hierarchy_list.sort(key=lambda x: len(x))
            for hierarchy in hierarchy_list:
                fqcn = self._get_fqcn(package_name, hierarchy)
                line_numbers = list(set(self._get_line_numbers(hierarchy[-1])))
                for i in line_numbers:
                    lineno_to_fqcn[i-1] = fqcn
        except:
            for i in range(len(self.lines)):
                lineno_to_fqcn[i] = self.fqcn

        return lineno_to_fqcn


class WebSocketHandler(tornado.websocket.WebSocketHandler):
    # where, locals, dump this, list
    def check_origin(self, origin):
        return True

    def open(self):
        debug("opening websocket")

    def on_message(self, message):
        """
        expected message should be json like:
        {
        class:<class>,
        lineno:<lineno>,
        path:<path to the source code>},
        where:<where>,
        this: <this>,
        locals:<locals>,
        }
        """
        try:
            debug(message)
            decoded = json.loads(message)
            debug(self.__class__.__name__ + "." + sys._getframe().f_code.co_name + ": bp info in json:" + str(decoded))

            # where
            where = decoded.get('where').replace('\r','')
            debug("where=" + where)
            text_where_area.text = where

            # locals
            _locals = decoded.get('locals').replace('\r','')
            debug("locals=" + _locals)
            text_locals_area.text = _locals
            
            # this
            _this = decoded.get('dump_this').replace('\r','')
            debug("this=" + _this)
            text_this_area.text = _this

            # break point line numbers
            # line number in the margin starts with 0
            bplinenos = [int(x)-1 for x in decoded.get('bplinenos')]
            NoNumberedMarginWithCurrentlineAndBreakpoint.bplinenos = bplinenos
            
            # code
            fqcn = decoded.get('class')
            debug(self.__class__.__name__ + "." + sys._getframe().f_code.co_name + ": fqcn:" + fqcn)
            lineno = decoded.get('lineno')
            debug(self.__class__.__name__ + "." + sys._getframe().f_code.co_name + ": lineno:" + str(lineno))
            # line number in the margin starts with 0
            NoNumberedMarginWithCurrentlineAndBreakpoint.current_lineno = lineno - 1
            path = decoded.get('path')
            debug(self.__class__.__name__ + "." + sys._getframe().f_code.co_name + ": path:" + str(path))
            code = Code(fqcn, lineno, path)
            text_code_area.buffer.set_document(Document(code.joined_numbered_lines, code.cursor_position), bypass_readonly=True)
            
        except json.decoder.JSONDecodeError as e:
            debug(e.msg)
            debug(str(e))
            warn(traceback.format_exc())
            #raise e
        except Exception as e:
            debug("other exception")
            warn(traceback.format_exc())
 
    def on_close(self):
        debug("closing websocket")



class WebSocketServerThread(threading.Thread):

    """docstring for TestThread"""

    def __init__(self):
        super(WebSocketServerThread, self).__init__(daemon=True)

    def run(self):
        asyncio.set_event_loop(asyncio.new_event_loop())
        application = tornado.web.Application([
            (r"/", WebSocketHandler),
        ])
        application.listen(PJDB_PORT_INT, address='127.0.0.1')
        tornado.ioloop.IOLoop.instance().start()


def log_write(level, msg):
    now = datetime.datetime.now().strftime("%Y/%m/%d %H:%M:%S.%f")
    LOG_FD.write(" ".join([now, level, msg]))
    LOG_FD.write("\n")
    LOG_FD.flush()


def debug(msg):
    if DEBUG:
        log_write("DEBUG", msg)


def warn(msg):
    log_write("WARN", msg)


def main():

    sys.stdin = os.fdopen(sys.stdin.fileno(), 'rb', 0)
    
    thread = WebSocketServerThread()
    thread.start()

    kb_help_text_box = TextArea(
        text='',
        read_only=True,
        height=1,
        style='class:title',
    )

    widget_list = [
        # (widget,
        #  help message if not marked,
        #  help message if marked,
        #  help message for term not in copy-mode)
        [
            term1,
            " C-q:exit  C-w:switch focus  C-c:enter copy mode  C-y:paste", # has focus at startup
            " C-q:exit  C-w:switch focus  C-s,/:search  C-g:cancel mark  Escape-w:copy selected region  C-c:exit copy mode",
        ], [
            text_code_area,
            " C-q:exit  C-w:switch focus  C-s,/:search  C-spc:mark  s:step  n:next  u:step up  c:cont  b:set/remove breakpoint",
            " C-q:exit  C-w:switch focus  C-s,/:search  C-g:cancel mark  Escape-w:copy selected region",
        ], [
            text_where_area,
            " C-q:exit  C-w:switch focus  C-s,/:search  C-space:mark",
            " C-q:exit  C-w:switch focus  C-s,/:search  C-g:cancel mark  Escape-w:copy selected region",
        ], [
            text_this_area,
            " C-q:exit  C-w:switch focus  C-s,/:search  C-space:mark",
            " C-q:exit  C-w:switch focus  C-s,/:search  C-g:cancel mark  Escape-w:copy selected region",
        ], [
            text_locals_area,
            " C-q:exit  C-w:switch focus  C-s,/:search  C-space:mark",
            " C-q:exit  C-w:switch focus  C-s,/:search  C-g:cancel mark  Escape-w:copy selected region",
        ],
    ]

    kb = KeyBindings()

    handle = kb.add

    handle('c-v')(scroll_page_down)
    handle('pagedown')(scroll_page_down)
    handle('escape', 'v')(scroll_page_up)
    handle('pageup')(scroll_page_up)

    @Condition
    def has_focus_on_code():
        "true if focus on code"
        return application.layout.has_focus(text_code_area)

    @Condition
    def has_focus_on_search():
        return application.layout.has_focus(search_field)

    @kb.add('n', filter=has_focus_on_code & ~has_selection)
    def _(event):
        "next"
        term1.terminal_control.process.write_input("next\n")
    
    @kb.add('s', filter=has_focus_on_code & ~has_selection)
    def _(event):
        "step"
        term1.terminal_control.process.write_input("step\n")
    
    @kb.add('u', filter=has_focus_on_code & ~has_selection)
    def _(event):
        "step up"
        term1.terminal_control.process.write_input("step up\n")
    
    @kb.add('c', filter=has_focus_on_code & ~has_selection)
    def _(event):
        "step up"
        term1.terminal_control.process.write_input("cont\n")
    
    @kb.add('b', filter=has_focus_on_code & ~has_selection)
    def _(event):
        "set break point"
        #text_locals_area.text = "b entered with line num = " + str(text_code_area.document.cursor_position_row) + " fqcn: " + str(Code.current.lineno_to_fqcn[text_code_area.document.cursor_position_row])
        lineno = text_code_area.document.cursor_position_row
        code = Code.current
        fqcn = code.lineno_to_fqcn[text_code_area.document.cursor_position_row]
        if fqcn == None:
            return
        if lineno in NoNumberedMarginWithCurrentlineAndBreakpoint.bplinenos:
            term1.terminal_control.process.write_input("delete {}:{}\n".format(fqcn, str(lineno+1)))
            NoNumberedMarginWithCurrentlineAndBreakpoint.bplinenos.remove(lineno)
        else:
            term1.terminal_control.process.write_input("b {}:{}\n".format(fqcn, str(lineno+1)))
            NoNumberedMarginWithCurrentlineAndBreakpoint.bplinenos.append(lineno)
        text_code_area.buffer.set_document(Document(code.joined_numbered_lines, text_code_area.document.cursor_position), bypass_readonly=True)
    
    @Condition
    def is_focus_on_term():
        "true if focus on term"
        return widget_list[-1][0] == term1

    @Condition
    def is_copying_on_term():
        return term1.is_copying

    @kb.add('c-c', filter=is_focus_on_term & ~is_copying_on_term)
    def _(event):
        #text_locals_area.text = "c-c entered with " + str(event)
        term1.enter_copy_mode()
        widget_list[-1][1] = " C-q:exit  C-s,/:search  C-space:mark  C-c:exit copy mode"
        kb_help_text_box.text = widget_list[-1][1]

    @kb.add('c-c', eager=True, filter=is_focus_on_term & is_copying_on_term)
    def _(event):
        #text_locals_area.text = "c-c entered with " + str(event)
        term1.exit_copy_mode()
        widget_list[-1][1] = " C-q:exit  C-w:switch focus  C-c:enter copy mode  C-y:paste"
        kb_help_text_box.text = widget_list[-1][1]
    
    @kb.add('c-g')
    def _(event):
        """
        reset mark
        """
        event.current_buffer.selection_state = None
        kb_help_text_box.text = widget_list[-1][1]
        
    @kb.add('c-@')
    def _(event):
        """
        set mark
        """
        buff = event.current_buffer
        if buff.text:
            buff.start_selection(selection_type=SelectionType.CHARACTERS)
        kb_help_text_box.text = widget_list[-1][2]

    @kb.add('c-w', eager=True, filter=~is_copying_on_term)
    def _(event):
        switch_focus()
        kb_help_text_box.text = widget_list[-1][1]

    @kb.add('c-y')
    def _(event):
        "paste"
        term1.terminal_control.process.write_input(
            clipboard.get_data().text,
        )
    
    @kb.add('c-q', eager=True)
    def _(event):
        term1.terminal_control.process.write_input('\x05\x15\x04') # send ^e^u^d(EOT) to terminate rlwrap
        event.app.exit()

    @kb.add('c-z', eager=True)
    def _(event):
        term1.terminal_control.process.write_input('\n')
        text_locals_area.text = "you hit c-z"
        
    @kb.add('escape', 'w', filter=has_selection)
    def _(event):
        """
        Copy selected text.
        """
        data = event.current_buffer.copy_selection()
        clipboard.set_data(data)
        kb_help_text_box.text = widget_list[-1][1]

    def switch_focus():
        """
        Change focus
        """
        next_widget_info = widget_list.pop(0)
        next_widget = next_widget_info[0]
        application.layout.focus(next_widget)
        widget_list.append(next_widget_info)

    # not sure why, but this is needed not to break prompt with 'where' output
    term1.terminal_control.process.write_input('\n')

    clipboard=PyperclipClipboard()

    application = Application(
        layout=Layout(
            container=HSplit([
                kb_help_text_box,
                VSplit([
                    #Window(style='bg:#aaaaff', width=1),
                    HSplit([
                        text_locals_area,
                        text_this_area,
                        text_where_area,
                    ],
                           padding=1,
                           padding_char='-',
                    ),
                    HSplit([
                        text_code_area,
                        term1,
                    ],
                           padding=1,
                           padding_char='-',
                           #height = divide_equally,
                    ),
                ],
                       #padding=1,
                       #padding_char='|',
                ),
                search_field,
            ]),
            focused_element=term1
        ),
        #########################################################################################
        #include_default_pygments_style=False,
        #########################################################################################
        style=style,
        key_bindings=merge_key_bindings([
            load_key_bindings(),
            kb,
        ]),
        full_screen=True,
        mouse_support=False,
        clipboard=clipboard,
    )

    # focus on term
    switch_focus()
    kb_help_text_box.text = widget_list[-1][1]
    application.run()


search_field = SearchToolbar(text_if_not_searching=[
    ('class:not-searching', "Press '/' to start searching.")])


style = Style([
    ('terminal focused',    'bg:#aaaaaa'),
    ('title', 'bg:#000044 #ffffff underline'),
    ('pygments.comment', 'noitalic #800000'),
])


divide_equally = Dimension(min=10, max=30, weight=1)


text_where_area = TextArea(
    text         = '',
    read_only    = True,
    scrollbar    = True,
    search_field = search_field,
    lexer        = PygmentsLexer(PythonLexer),
)


text_code_area = TextArea(
    text         = '',
    read_only    = True,
    scrollbar    = True,
    line_numbers = True,
    search_field = search_field,
    lexer        = PygmentsLexer(JavaLexer),
)
#text_code_area.window.cursorline = to_filter(True)
text_code_area.window.cursorline = to_filter(False)
text_code_area.window.scroll_offsets = ScrollOffsets(top=8, bottom=8, left=0, right=0)
text_code_area.window.left_margins = [NoNumberedMarginWithCurrentlineAndBreakpoint()]


rlwrap = find_executable('rlwrap')
if rlwrap is None: exit("Not found rlwrap")
pjdb_filter = BINDIR + '/pjdb_filter'
rlwrap_opts = ['-H', HISTORY_FILE,
               '-l', RLWRAP_LOG_FILE,
               '-w', '200',
               #'-pRED',
               '-pBLUE',
               '-C', 'jdb',
               '-b', "' .'",
               '-z',
               pjdb_filter]
jdb = find_executable('jdb')
jdb_opts = sys.argv[1:]
cmd = [rlwrap] + rlwrap_opts + [jdb] + jdb_opts
term1 = Terminal(
    command=cmd,
    height = Dimension(min=20, max=20, weight=1)
)


text_locals_area = TextArea(
    text         = '',
    read_only    = True,
    #height       = divide_equally,
    scrollbar    = True,
    search_field = search_field,
    lexer        = PygmentsLexer(PythonLexer),
)


text_this_area = TextArea(
    text         = '',
    read_only    = True,
    #height       = divide_equally,
    scrollbar    = True,
    search_field = search_field,
    lexer        = PygmentsLexer(PythonLexer),
)

# init: marked = False
# hit space: mark at cursor and marked = True
# move cursor
# hit space: copy region

if __name__ == '__main__':
    main()
